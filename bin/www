#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('schat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var env = process.env.ENV || 'development';
app.set('env', env);

/**
 * Create HTTP server. Set up socket.io
 */

var server = http.createServer(app);
//var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Listen for web sockets.
 */
var util = require('util');
var fs = require('fs');
var ws = require('nodejs-websocket');
var wsServer = ws.createServer(function(conn){
  fs.watch('./bin/test.txt', function(event){
    fs.readFile('./bin/test.txt',{encodding: 'utf8'}, function(err, data){
      console.log("File Changed:"+event);
      if(conn){
        conn.sendText(data.toString());
        console.log("WS Sent "+data.toString());  
      }
    });
  });

  conn.on("text", function(str){
    console.log("WS Received "+str);
  });

  conn.on('closed', function(code, reason){
    console.log("WS Connection Closed");
  });
}).listen(8080);

  
/*
io.on('connection', function (socket) {
  app.socketHandler.connect(socket);
});
*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
